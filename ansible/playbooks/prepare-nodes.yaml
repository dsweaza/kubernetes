---
- name: Prepare K8 Machines for RKE
  hosts: k8s
  become: yes
  ignore_errors: yes
  tasks:
  
  - name: Load RKE kernel modules
    vars:
      kernel_modules:
        - br_netfilter
        - ip6_udp_tunnel
        - ip_set
        - ip_set_hash_ip
        - ip_set_hash_net
        - iptable_filter
        - iptable_nat
        - iptable_mangle
        - iptable_raw
        - nf_conntrack_netlink
        - nf_conntrack
        - nf_defrag_ipv4
        - nf_nat     
        - nfnetlink
        - udp_tunnel
        - veth
        - vxlan
        - x_tables
        - xt_addrtype
        - xt_conntrack
        - xt_comment
        - xt_mark
        - xt_multiport
        - xt_nat
        - xt_recent
        - xt_set
        - xt_statistic
        - xt_tcpudp

    tasks:
      - name: Load kernel modules for RKE
        modprobe:
          name: "{{ item }}"
          state: present
        with_items: "{{ kernel_modules }}"
 
  - name: Apt Update
    apt:
      update_cache: yes
  
  - name: Install Apt Packages
    apt:
      name:
        - ca-certificates
        - gnupg
        - curl
        - lsb-release
        
  - name: Add Docker GPG Key
    shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
  - name: Setup stable rep
    shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
  - name: Apt Update
    apt:
      update_cache: yes
      
  - name: Install Docker from Apt
    apt:
      name:
        - docker-ce 
        - docker-ce-cli 
        - containerd.io
        
  - name: Disable SWAP
    shell: swapoff -a

  - name: Open TCP 6443
    shell: iptables -A INPUT -p tcp --dport 6443 -j ACCEPT

  - name: Configure sshd
    lineinfile:
      path: "/etc/ssh/sshd_config"
      regex: "^(#)?{{item.key}}"
      line: "{{item.key}} {{item.value}}"
      state: present
    loop:
      - { key: "AllowTcpForwarding", value: "yes" }
    notify:
      - restart sshd

  - name: Modify sysctl entries
    sysctl:
      name: '{{ item.key }}'
      value: '{{ item.value }}'
      sysctl_set: yes
      state: present
      reload: yes
    with_items:
      - {key: net.bridge.bridge-nf-call-ip6tables, value: 1}
      - {key: net.bridge.bridge-nf-call-iptables,  value: 1}
      - {key: net.ipv4.ip_forward,  value: 1}
    
  - name: Create group for docker
    group:
      name: docker
    register: group
  
  - name: Setup ansible user as part of docker group
    user:
      name: ansible
      groups: docker
      append: yes
    register: docker_user

  handlers:
    - name: restart sshd
      service: name=sshd state=restarted